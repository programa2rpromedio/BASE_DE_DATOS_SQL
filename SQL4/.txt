Integridad y modelos de datos

üü¢ OBJETIVOS:
  Agregar una clave primaria 
  Agregar una clave for√°nea 
  Convertir un modelo de datos a una base de datos

---------------------------------------------------

üü¢  INTRODUCCION.

  La integridad es un concepto importante en bases de datos y se refiere a cu√°nto podemos
  realmente confiar en nuestros en datos. 

  ‚óè Integridad referencial: Generada entre datos que se cruzan entre varias tablas.
  ‚óè Integridad mediante clave primaria: Generada a trav√©s de un dato que contiene un valor √∫nico, por
  ejemplo la clave primaria (Primay Key, PK)
  ‚óè Integridad mediante restricciones: Generada a partir de la restricci√≥n de los tipos de valores que se
  pueden almacenar en un campo de una tabla.


  Nombre | Edad
  Consuelo  27
  Consuelo  32
  Francisco 27

  ¬øPor qu√© dejar√≠amos de confiar en nuestros datos? Porque a trav√©s de consultas con
  insert, update o delete podr√≠amos alterar por accidente datos que no queremos
  alterar.

  üü° Si queremos aumentar la edad de Consuelo, ¬øc√≥mo lo hacemos?
    ‚óè Si actualizamos por edad, modificaremos 2 registros.
    ‚óè Si actualizamos por nombre, modificaremos 2 registros.
    ‚óè Es posible modificar por ambos, pero en algunas ocasiones se nos podr√≠a olvidar y
    causar un problema de correctitud de datos

üü¢ Clave primaria (PK) - Integridad mediante clave primaria

  Si queremos que nuestros registros no se repitan y tener una forma de indentificarlos univocamente podemos agregar una nueva
  columna, y en ella guardar un valor que sea √∫nico por cada registro. Sin embargo,
  simplemente agregar una columna no resuelve completamente el problema, ya que no es
  correcto depender √∫nicamente de las buenas pr√°cticas de la organizaci√≥n. Dicho de otro
  modo, se trata de una soluci√≥n ‚Äúfr√°gil‚Äù.

  Para asegurarnos que este valor realmente no pueda repetirse (y con ello amenazar la
  integridad de los datos), especificaremos que esta columna es clave primaria (primary key,
  abreviado PK).

  Al establecer que un campo es clave primaria
  (Primary key, abreviado PK) nos aseguramos de
  que deba ser √∫nico y adem√°s que no pueda ser
  nulo.

  ‚óè La clave primaria nos permite identificar de forma √∫nica un registro.
  ‚óè Una clave primaria es una restricci√≥n que impide que los valores
  ingresados en esa columna est√©n repetidos o sean nulos.
  ‚óè No es necesario que la clave primaria sea un campo llamado id. Tambi√©n
  puede ser un email, por ejemplo, pero debe cumplir que sea el √∫nico registro en esa
  tabla con dicho email.


  üü°  Intentemos insertar dos usuario con el mismo id
  y un usuario sin id 

üü¢ clave for√°nea - Foreign Key - FK  - Integridad referencial

  En otras ocasiones nos interesar√° que no se borre un registro relacionado con otro registro.
  Por ejemplo, si tenemos dos tablas relacionadas - una de usuarios y otra de pagos -
  podr√≠amos insertar un pago asociado a un usuario que no existe, o podr√≠amos borrar un
  usuario y se perder√≠a la informaci√≥n de qui√©n realiz√≥ un pago. En ambos casos, se trata de
  un riesgo para el negocio.

   üü° Crea la tabla pagos y la tabla usuarios. En ambas, id es clave primaria, nombre es
  varchar(255) y monto y usuario_id son integers.
  2. Ingresa los mismos datos especificados en las tablas diagramadas en la actividad.
  3. Borra el usuario 2 de la tabla.
  4. Selecciona todos los pagos.
  a. ¬øTiene sentido que haya un pago a un usuario 4 que no existe y nunca ha
  existido?
  b. ¬øTiene sentido que haya un pago al usuario 2 que acabamos de borrar y, por
  lo tanto, tampoco existe?

  Este tipo de problemas se conocen como ‚Äúde integridad referencial‚Äù. La integridad de datos
  del modelo peligra debido a que se pueden producir referencias incorrectas entre los datos
  de las distintas tablas.

  CREATE TABLE pagos (
  id int primary key,
  monto int,
  usuario_id int references users(id)
  );

  ‚óè La clave for√°nea nos permite protegernos de problemas de integridad
  referencial
  ‚óè La clave for√°nea tiene que ir asociada a una clave √∫nica o primaria de
  otra tabla. De preferencia debe ser primaria.
  ‚óè Al utilizar una clave for√°nea no podremos tener elementos asociados a
  un registro no existente. Esto generar√° un error tanto si intentamos ingresar registros
  asociados a un registro que no existe, o si intentamos borrar un registro al cual
  tenemos registros asociados.

üü¢ Borrado en cascada
  CREATE TABLE comments (
  "id" Integer,
  "content" Varchar(255),
  "post_id" Integer,
  PRIMARY KEY ("id"),
  FOREIGN KEY ("post_id")
  REFERENCES posts ("id")
  ON DELETE CASCADE /* Con esto los datos se borrar√°n en cascada
  autom√°ticamente */
  );

üü¢ Otras Restricciones
  As√≠ como podemos implementar restricciones de clave primar√≠a y de clave for√°nea, tambi√©n
  es posible implementar otras restricciones.
  ‚óè Not Null
  ‚óè Unique
  ‚óè Check
  Los checks nos permiten agregar restricciones con base en alguna regla espec√≠fica, por
  ejemplo, que un valor sea mayor que cero o que otro n√∫mero, o que tenga que ser distinto de
  cierto texto. 
  CREATE TABLE productos(
  "nombre" VARCHAR(200),
  "stock" INTEGER CHECK (stock >= 0)
  );

üü¢ Modelos de datos

  En ocasiones nos entregar√°n un diagrama del modelo de datos en lugar de una tabla.
  Dentro de los modelos de entidad relaci√≥n (ER) existen 3 tipos de modelos m√°s conocidos:
  ‚óè Modelo conceptual
  ‚óè Modelo l√≥gico
  ‚óè Modelo f√≠sico
    el modelo f√≠sico ya presenta todos los detalles necesarios para la implementaci√≥n
    del modelo de datos en un base de datos del motor escogido. Por lo mismo, el
    modelo f√≠sico es el que m√°s se asemeja a su implementaci√≥n final.

  Modelo f√≠sico
  En t√©rminos pr√°cticos, es un diagrama que nos permite comunicar de forma gr√°fica nuestro
  modelo de datos. Las relaciones entre tablas se indican con una l√≠nea cuyas terminaciones
  indican el tipo de relaci√≥n que existe.

  üü¢ Cardinalidad
  Hablaremos de cardinalidad cuando hablemos de qu√© tipo de relaci√≥n hay entre dos tablas.
  Principalmente veremos 3 casos:
  ‚óè 1 : 1 (Uno a uno)
  ‚óè 1 : N (Uno a muchos)
  ‚óè N : N (Muchos a muchos)

  üü° Ejemplo de relaci√≥n de 1 a N
  Las relaciones 1 a N indican que un elemento de una tabla puede estar asociado a muchos
  elementos de otra tabla.


  üü° Relaciones N a N
  Las relaciones N a N indican que un elemento de una tabla A puede estar asociado a
  m√∫ltiples elementos de la tabla B, y un elemento de la tabla B puede estar asociado a
  m√∫ltiples elementos de la tabla A.

  Un modelo N a N no se puede implementar directamente en una base de datos relacional,
  pero podemos hacerlo creando una tabla intermedia.

  La l√≥gica de la tabla intermedia siempre es igual: entre 2 tablas de N a N agregamos una
  tabla que contiene las FK de las otras dos tablas. La tabla intermedia siempre queda del
  lado de ‚Äúmuchos‚Äù.
